Get_home.dart
import 'dart:async';
import 'dart:convert';
 
import 'package:dog_hub/noti.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:http/http.dart' as http;
import 'package:liquid_progress_indicator/liquid_progress_indicator.dart';
import 'package:intl/intl.dart';
 
import '../noti.dart';
 
final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
    FlutterLocalNotificationsPlugin();
 
class GetHome extends StatefulWidget {
  const GetHome({Key? key}) : super(key: key);
 
  @override
  State<GetHome> createState() => _GetHomeState();
}
 
class _GetHomeState extends State<GetHome> {
  List getInfo = [];
  List feedInfo = [];
  String nextTime = '';
  double feedContainer = 0;
  String waterContainer = '';
  double waterPercent = 0;
  String openGate = '';
  int picIndex = 0;
  int NotificationWater = 0;
  int NotificationFeed = 0;
  String ConnectedDevice = 'OFF';
  String DropFeed = '';
  Timer? _timer;
 
  List<String> picPath = ['assets/images/lock.png', 'assets/images/unlock.png'];
 
  Future<void> getrecord() async {
    String uri = 'http://doghub.fun/get_data.php';
    // String uri = 'http://192.168.0.101/doghub/get_data.php';
    try {
      var res = await http.get(Uri.parse(uri));
      setState(() {
        getInfo = jsonDecode(res.body);
        ConnectedDevice = getInfo[5]['value'];
        DropFeed = getInfo[6]['value'];
        if (DropFeed == 'YES') {
          changeConnect('dropfeed', 'NO');
          Notif.showBigTextNotification(
              title: 'Feed Drop',
              body: 'The Dog is being fed',
              fln: flutterLocalNotificationsPlugin);
        }
        print(ConnectedDevice);
        if (ConnectedDevice == 'ON') {
          changeConnect('deviceconnect', 'OFF');
        } else {
          Notif.showBigTextNotification(
              title: 'Device ERROR',
              body: 'Device is not connected',
              fln: flutterLocalNotificationsPlugin);
          print('Device is not connected');
          SystemChannels.platform.invokeMethod('SystemNavigator.pop');
        }
 
        openGate = getInfo[0]['value'];
        if (openGate == 'OPEN')
          picIndex = 1;
        else if (openGate == 'CLOSE') picIndex = 0;
        feedContainer = double.parse(getInfo[3]['value']);
        if (feedContainer <= 10.0) {
          if (NotificationFeed == 0) {
            NotificationFeed = 1;
            Notif.showBigTextNotification(
                title: 'Feed Container',
                body: 'Feed Container Level is at 10%',
                fln: flutterLocalNotificationsPlugin);
            print('Feed Container Level is at 10%');
          }
        } else {
          NotificationFeed = 0;
        }
        waterContainer = getInfo[4]['value'];
        if (waterContainer == 'HIGH') {
          waterPercent = 100;
          NotificationWater = 0;
        }
        if (waterContainer == 'MEDIUM') {
          waterPercent = 65;
          NotificationWater = 0;
        }
        if (waterContainer == 'LOW') {
          waterPercent = 30;
          if (NotificationWater == 0) {
            NotificationWater = 1;
            print('Water Container Level is at 30%');
            Notif.showBigTextNotification(
                title: 'Water Container',
                body: 'Water Container Level is at 30%',
                fln: flutterLocalNotificationsPlugin);
          }
        }
        if (waterContainer == 'EMPTY') {
          print(waterContainer);
          waterPercent = 0;
          print(NotificationWater);
          if (NotificationWater == 1) {
            NotificationWater = 0;
            Notif.showBigTextNotification(
                title: 'Water Container',
                body: 'Water Container is EMPTY',
                fln: flutterLocalNotificationsPlugin);
          }
        }
      });
    } catch (e) {
      print(e);
    }
  }
 
  Future<void> changeConnect(String valueName, String value) async {
    try {
      // _timer?.cancel();
      String uri = 'http://doghub.fun/update_data.php';
      var res = await http.post(Uri.parse(uri), body: {
        "dataName": valueName,
        "value": value,
      });
 
      var response = jsonDecode(res.body);
    } catch (e) {
      print(e);
    }
  }
 
  @override
  void initState() {
    // TODO: implement initState
    Notif.initialize(flutterLocalNotificationsPlugin);
    Timer mytimer = Timer.periodic(Duration(seconds: 10), (timer) {
      //code to run on every 5 seconds
      getrecord();
      feedDate(0);
    });
    super.initState();
  }
 
  TimeOfDay stringToTimeOfDay(String tod) {
    final format = DateFormat.Hms(); //"6:00 AM"
    return TimeOfDay.fromDateTime(format.parse(tod));
  }
 
  Future<void> feedDate(int daysAdd) async {
    try {
      DateTime today = DateTime.now();
      DateTime changeDate = new DateTime.now();
      String dateFeed = DateFormat.E().format(changeDate);
      String uri = 'http://doghub.fun/get_feed.php';
      var res = await http.post(Uri.parse(uri), body: {
        "feedday": dateFeed,
      });
      setState(() {
        feedInfo = jsonDecode(res.body);
      });
 
      int currentTime = 0;
 
      for (var x = 0; x < feedInfo.length; x++) {
        var timeConvert = stringToTimeOfDay(feedInfo[x]['feedtime']);
        int nowSec = (TimeOfDay.now().hour * 60 + TimeOfDay.now().minute) * 60;
        int veiSec = (timeConvert.hour * 60 + timeConvert.minute) * 60;
        int dif = veiSec - nowSec;
        if (currentTime < dif) {
          nextTime = feedInfo[x]['feedtime'];
        }
      }
    } catch (e) {
      print(e);
    }
  }
 
  Widget createNotif(String labelText, double labelValue, Color shadedColor) {
    return Container(
      margin: EdgeInsets.only(top: 5),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          Container(
              margin: EdgeInsets.all(10),
              child: Text(
                labelText,
                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
              )),
          Container(
            height: 50,
            width: 180,
            child: Card(
              elevation: 10,
              child: Padding(
                padding: EdgeInsets.all(10),
                child: LiquidCircularProgressIndicator(
                  value: labelValue / 100.00,
                  valueColor: AlwaysStoppedAnimation(shadedColor),
                  backgroundColor: Colors.white,
                  borderColor: Colors.transparent,
                  borderWidth: 5.0,
                  direction: Axis.horizontal,
                  center: Text(
                    '${labelValue.toStringAsFixed(0)}%',
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
 
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        children: [
          Container(
            margin: EdgeInsets.symmetric(horizontal: 5, vertical: 20),
            child: Column(
              children: [
                Center(
                    child: Text(
                  'Feed & Water Container',
                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                )),
                createNotif(
                    'Feed Container : ', feedContainer, Colors.blueGrey),
                createNotif(
                    'Water Container : ', waterPercent, Colors.lightBlue),
              ],
            ),
          ),
          Container(
            margin: EdgeInsets.symmetric(horizontal: 5, vertical: 5),
            child: Column(
              children: [
                Center(
                    child: Text(
                  'Next Feeding Schedule',
                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                )),
                Container(
                  margin: EdgeInsets.all(5),
                  height: 50,
                  width: 200,
                  child: Card(
                    elevation: 5,
                    child: Center(
                        child: Text(
                      nextTime,
                      style:
                          TextStyle(fontWeight: FontWeight.bold, fontSize: 20),
                    )),
                  ),
                )
              ],
            ),
          ),
          Container(
            margin: EdgeInsets.only(top: 5),
            padding: EdgeInsets.all(10),
            child: Column(
              children: [
                Center(
                    child: Text(
                  'Cage Gate Info',
                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                )),
                Container(
                  height: 120,
                  width: 120,
                  margin: EdgeInsets.all(5),
                  child: Card(
                    child: Image.asset(picPath[picIndex]),
                    elevation: 10,
                  ),
                ),
                Text(openGate,
                    style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold))
              ],
            ),
          ),
        ],
      ),
    );
  }
}
 
Add_feed.dart
 
 
import 'dart:async';
import 'dart:convert';
 
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:http/http.dart' as http;
 
import '../noti.dart';
 
final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
    FlutterLocalNotificationsPlugin();
 
class AddFeed extends StatefulWidget {
  final Function refreshSched;
 
  AddFeed(this.refreshSched);
  @override
  State<AddFeed> createState() => _AddFeedState();
}
 
class _AddFeedState extends State<AddFeed> {
  final dateController = TextEditingController();
  var _selectedTime;
  TimeOfDay timeNow = TimeOfDay.now();
 
  bool? isSun = false;
  bool? isMon = false;
  bool? isTue = false;
  bool? isWed = false;
  bool? isThur = false;
  bool? isFri = false;
  bool? isSat = false;
  List getInfo = [];
  int NotificationWater = 0;
  int NotificationFeed = 0;
  String ConnectedDevice = 'OFF';
  String DropFeed = '';
  double feedContainer = 0;
  String waterContainer = '';
 
  // Future<void> getrecord() async {
  //   String uri = 'https://undutiful-outline.000webhostapp.com/get_data.php';
  //   // String uri = 'http://192.168.0.101/doghub/get_data.php';
  //   try {
  //     var res = await http.get(Uri.parse(uri));
  //     setState(() {
  //       getInfo = jsonDecode(res.body);
  //       ConnectedDevice = getInfo[5]['value'];
  //       DropFeed = getInfo[6]['value'];
  //       if (DropFeed == 'YES') {
  //         changeConnect('dropfeed', 'NO');
  //         Notif.showBigTextNotification(
  //             title: 'Feed Drop',
  //             body: 'The Dog is being fed',
  //             fln: flutterLocalNotificationsPlugin);
  //       }
  //       print(ConnectedDevice);
  //       if (ConnectedDevice == 'ON') {
  //         changeConnect('deviceconnect', 'OFF');
  //       } else {
  //         Notif.showBigTextNotification(
  //             title: 'Device ERROR',
  //             body: 'Device is not connected',
  //             fln: flutterLocalNotificationsPlugin);
 
  //         //SystemChannels.platform.invokeMethod('SystemNavigator.pop');
  //       }
 
  //       feedContainer = double.parse(getInfo[3]['value']);
  //       if (feedContainer <= 10.0) {
  //         if (NotificationFeed == 0) {
  //           NotificationFeed = 1;
  //           Notif.showBigTextNotification(
  //               title: 'Feed Container',
  //               body: 'Feed Container Level is at 10%',
  //               fln: flutterLocalNotificationsPlugin);
  //         }
  //       } else {
  //         NotificationFeed = 0;
  //       }
  //       waterContainer = getInfo[4]['value'];
  //       if (waterContainer == 'HIGH') {
  //         NotificationWater = 0;
  //       }
  //       if (waterContainer == 'MEDIUM') {
  //         NotificationWater = 0;
  //       }
  //       if (waterContainer == 'LOW') {
  //         if (NotificationWater == 0) {
  //           NotificationWater = 1;
  //           print('Water Container Level is at 10%');
  //           Notif.showBigTextNotification(
  //               title: 'Water Container',
  //               body: 'Water Container Level is at 10%',
  //               fln: flutterLocalNotificationsPlugin);
  //         }
  //       }
  //       if (waterContainer == 'EMPTY') {
  //         if (NotificationWater == 1) {
  //           NotificationWater = 0;
  //           Notif.showBigTextNotification(
  //               title: 'Water Container',
  //               body: 'Water Container is EMPTY',
  //               fln: flutterLocalNotificationsPlugin);
  //         }
  //       }
  //     });
  //   } catch (e) {
  //     print(e);
  //   }
  // }
 
  // Future<void> changeConnect(String valueName, String value) async {
  //   try {
  //     // _timer?.cancel();
  //     String uri =
  //         'https://undutiful-outline.000webhostapp.com/update_data.php';
  //     var res = await http.post(Uri.parse(uri), body: {
  //       "dataName": valueName,
  //       "value": value,
  //     });
 
  //     var response = jsonDecode(res.body);
  //   } catch (e) {
  //     print(e);
  //   }
  // }
 
  void _presentDatePicker() {
    showTimePicker(
      context: context,
      initialTime: timeNow,
    ).then((pickedTime) {
      if (pickedTime == null) {
        return;
      }
      setState(() {
        _selectedTime = "${pickedTime.hour}:${pickedTime.minute}";
      });
    });
    print('...');
  }
 
  Widget createDays(String dayName, bool? toCheck) {
    return Row(
      children: [
        Checkbox(
          value: toCheck,
          onChanged: (bool? value) {
            setState(() {
              if (dayName == 'Sunday')
                isSun = value;
              else if (dayName == 'Monday')
                isMon = value;
              else if (dayName == 'Tuesday')
                isTue = value;
              else if (dayName == 'Wednesday')
                isWed = value;
              else if (dayName == 'Thursday')
                isThur = value;
              else if (dayName == 'Friday')
                isFri = value;
              else if (dayName == 'Saturday') isSat = value;
            });
          },
        ),
        Text(
          dayName,
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
      ],
    );
  }
 
  Future<void> _askedToLead() async {
    await showDialog(
        context: context,
        builder: (BuildContext context) {
          return SimpleDialog(
            title: Text('Schedule Saved!'),
            children: <Widget>[
              Center(
                child: SimpleDialogOption(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: Text('OK'),
                ),
              ),
            ],
          );
        });
  }
 
  Future<void> addFeed(String timeFeed) async {
    try {
      String uri = 'http://doghub.fun/add_feed.php';
 
      var res = await http.post(Uri.parse(uri), body: {
        "feedtime": timeFeed,
        "ismon": isMon.toString(),
        "istues": isTue.toString(),
        "iswed": isWed.toString(),
        "isthur": isThur.toString(),
        "isfri": isFri.toString(),
        "issat": isSat.toString(),
        "issun": isSun.toString(),
      });
 
      var response = jsonDecode(res.body);
      widget.refreshSched();
      _askedToLead();
    } catch (e) {
      print(e);
    }
  }
 
  // @override
  // void initState() {
  //   // TODO: implement initState
  //   Notif.initialize(flutterLocalNotificationsPlugin);
  //   Timer mytimer = Timer.periodic(Duration(seconds: 10), (timer) {
  //     //code to run on every 5 seconds
  //     getrecord();
  //   });
  //   super.initState();
  // }
 
  @override
  Widget build(BuildContext context) {
    String selectedValue = '1';
    return SingleChildScrollView(
      child: Card(
        elevation: 5,
        child: Container(
          padding: EdgeInsets.only(
            top: 10,
            left: 10,
            right: 10,
            bottom: MediaQuery.of(context).viewInsets.bottom + 10,
          ),
          child: Column(crossAxisAlignment: CrossAxisAlignment.end, children: <
              Widget>[
            Container(
              height: 70,
              child: Row(
                children: <Widget>[
                  Expanded(
                    child: Text(
                      _selectedTime == null
                          ? 'No Time Chosen!'
                          : '${_selectedTime}',
                      style: TextStyle(fontSize: 20),
                    ),
                  ),
                  TextButton(
                    style: TextButton.styleFrom(
                        foregroundColor: Theme.of(context).primaryColor),
                    child: Text(
                      'Choose Time',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    onPressed: _presentDatePicker,
                  ),
                ],
              ),
            ),
            Container(
                child: Column(
              children: [
                Center(
                  child: Text(
                    'Repeat',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                ),
                createDays('Sunday', isSun),
                createDays('Monday', isMon),
                createDays('Tuesday', isTue),
                createDays('Wednesday', isWed),
                createDays('Thursday', isThur),
                createDays('Friday', isFri),
                createDays('Saturday', isSat),
              ],
            )),
            ElevatedButton(
                style: ElevatedButton.styleFrom(
                    backgroundColor: Theme.of(context).primaryColor,
                    textStyle: TextStyle(color: Theme.of(context).buttonColor)),
                child: Text('Add Schedule'),
                onPressed: () {
                  addFeed(_selectedTime);
                  Navigator.of(context).pop();
                }),
          ]),
        ),
      ),
    );
  }
}
 
 
 
 
 
Get_feed.dart
 
 
import 'dart:async';
import 'dart:convert';
 
import 'package:flutter/services.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
 
import '../noti.dart';
import '../screen/sched_screen.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:http/http.dart' as http;
 
final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
    FlutterLocalNotificationsPlugin();
 
class GetFeed extends StatefulWidget {
  @override
  State<GetFeed> createState() => _GetFeedState();
}
 
class _GetFeedState extends State<GetFeed> {
  int DateToSave = 0;
  List<String> daysDisplay = [
    'Sun',
    'Mon',
    'Tue',
    'Wed',
    'Thur',
    'Fri',
    'Sat',
  ];
 
  List feedInfo = [];
  List waterInfo = [];
  double waterLevel = 0.0;
  List getInfo = [];
  int NotificationWater = 0;
  int NotificationFeed = 0;
  String ConnectedDevice = 'OFF';
  String DropFeed = '';
  double feedContainer = 0;
  String waterContainer = '';
 
  Future<void> feedDate(int daysAdd) async {
    try {
      DateTime today = new DateTime.now();
      DateTime changeDate = new DateTime.now();
      changeDate = DateTime.now().add(Duration(days: daysAdd));
      String dateFeed = DateFormat.E().format(changeDate);
      String uri = 'http://doghub.fun/get_feed.php';
      // print(dateFeed);
      var res = await http.post(Uri.parse(uri), body: {
        "feedday": dateFeed,
      });
      setState(() {
        feedInfo = jsonDecode(res.body);
        DateToSave = daysAdd;
      });
      print(feedInfo);
      // getrecord();
    } catch (e) {
      print(e);
    }
  }
 
  Future<void> getrecord() async {
    String uri = 'http://doghub.fun/get_data.php';
    // String uri = 'http://192.168.0.101/doghub/get_data.php';
    try {
      var res = await http.get(Uri.parse(uri));
      setState(() {
        getInfo = jsonDecode(res.body);
        ConnectedDevice = getInfo[5]['value'];
        DropFeed = getInfo[6]['value'];
        if (DropFeed == 'YES') {
          changeConnect('dropfeed', 'NO');
          Notif.showBigTextNotification(
              title: 'Feed Drop',
              body: 'The Dog is being fed',
              fln: flutterLocalNotificationsPlugin);
        }
 
        if (ConnectedDevice == 'ON') {
          changeConnect('deviceconnect', 'OFF');
        } else {
          Notif.showBigTextNotification(
              title: 'Device ERROR',
              body: 'Device is not connected',
              fln: flutterLocalNotificationsPlugin);
 
          SystemChannels.platform.invokeMethod('SystemNavigator.pop');
        }
        feedContainer = double.parse(getInfo[3]['value']);
        if (feedContainer <= 10.0) {
          if (NotificationFeed == 0) {
            NotificationFeed = 1;
            Notif.showBigTextNotification(
                title: 'Feed Container',
                body: 'Feed Container Level is at 10%',
                fln: flutterLocalNotificationsPlugin);
          }
        } else {
          NotificationFeed = 0;
        }
        waterContainer = getInfo[4]['value'];
        if (waterContainer == 'HIGH') {
          NotificationWater = 0;
        }
        if (waterContainer == 'MEDIUM') {
          NotificationWater = 0;
        }
        if (waterContainer == 'LOW') {
          if (NotificationWater == 0) {
            NotificationWater = 1;
            print('Water Container Level is at 30%');
            Notif.showBigTextNotification(
                title: 'Water Container',
                body: 'Water Container Level is at 30%',
                fln: flutterLocalNotificationsPlugin);
          }
        }
        if (waterContainer == 'EMPTY') {
          if (NotificationWater == 1) {
            NotificationWater = 0;
            Notif.showBigTextNotification(
                title: 'Water Container',
                body: 'Water Container is EMPTY',
                fln: flutterLocalNotificationsPlugin);
          }
        }
      });
    } catch (e) {
      print(e);
    }
  }
 
  Future<void> changeConnect(String valueName, String value) async {
    try {
      // _timer?.cancel();
      String uri = 'http://doghub.fun/update_data.php';
      var res = await http.post(Uri.parse(uri), body: {
        "dataName": valueName,
        "value": value,
      });
 
      var response = jsonDecode(res.body);
    } catch (e) {
      print(e);
    }
  }
 
  Widget calendarFeed(String textDisplay, String daysDisplay) {
    return Column(
      children: [
        Text(
          textDisplay,
          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
        ),
        Text(
          daysDisplay,
          style: TextStyle(
              fontSize: 16, fontWeight: FontWeight.bold, color: Colors.red),
        ),
      ],
    );
  }
 
  @override
  void initState() {
    // TODO: implement initState
    Notif.initialize(flutterLocalNotificationsPlugin);
    Timer mytimer = Timer.periodic(Duration(seconds: 10), (timer) {
      //code to run on every 5 seconds
      getrecord();
      feedDate(0);
    });
    super.initState();
  }
 
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        // mainAxisAlignment: MainAxisAlignment.spaceAround,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Container(
            margin: EdgeInsets.symmetric(horizontal: 20),
            width: 450,
            child: Column(
              //crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8.0),
                  child: Text(
                    DateFormat.MMMM().format(DateTime.now()).toUpperCase(),
                    style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                  ),
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [
                    for (var x = 0; x < 7; x++)
                      InkWell(
                        borderRadius: BorderRadius.circular(10),
                        highlightColor: Colors.yellow,
                        onTap: () {
                          DateToSave = x;
                          feedDate(x);
                        },
                        child: calendarFeed(
                            DateFormat.E()
                                .format(DateTime.now().add(Duration(days: x))),
                            DateFormat.d()
                                .format(DateTime.now().add(Duration(days: x)))),
                      ),
                  ],
                ),
              ],
            ),
          ),
          Container(
              height: 180,
              width: 350,
              child: ListView.builder(
                  itemCount: feedInfo.length,
                  itemBuilder: (context, index) {
                    return Card(
                      child: ListTile(
                        leading: CircleAvatar(
                          radius: 30,
                          child: feedInfo[index]['status'] == 'DONE'
                              ? Icon(Icons.done)
                              : Icon(Icons.downloading),
                        ),
                        title: Text(
                          DateFormat.yMEd().format(
                              DateTime.now().add(Duration(days: DateToSave))),
                          style: TextStyle(fontWeight: FontWeight.bold),
                        ),
                        subtitle: Text(feedInfo[index]['feedtime']),
                      ),
                    );
                  })),
          OutlinedButton(
              onPressed: () {
                Navigator.of(context)
                    .push(MaterialPageRoute(builder: (context) => GetSched()));
                // showModalBottomSheet(
                //   context: context,
                //   builder: (_) {
                //     return GestureDetector(
                //       onTap: () {},
                //       behavior: HitTestBehavior.opaque,
                //       child: AddFeed(),
                //     );
                //   },
                // );
              },
              child: Text(
                'View Schedule',
                style:
                    TextStyle(fontWeight: FontWeight.bold, color: Colors.red),
              )),
        ],
      ),
    );
  }
}
